{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#about-the-project","title":"About The Project","text":"<p>This project contains a setup of re-usable GitHub composition actions.</p> <p>Specifically it is a library of semantically versioned actions, intended to be used as off-the-shelf, standardised, building blocks for CI/CD processes involving GitHub Actions.</p> <p>In the instance that several of these composite actions, when combined, fulfill a use-case this is either done via:</p> <ul> <li>Direct instantiation in a caller repo</li> <li>As a re-usable workflow</li> </ul> <p>It is recommended to begin with the Getting Started section, and then to simply find the action(s) of interest via the nav bar to investigate them further,.</p>"},{"location":"composite-actions/template/","title":"Task name","text":"<p>"},{"location":"composite-actions/template/#syntax","title":"Syntax","text":"<pre><code>- uses: sudoblark/sudoblark.github-actions.library/&lt;path&gt;@&lt;version&gt;\n  with:\n    &lt;all params&gt;\n    &lt;options commented out&gt;\n</code></pre>"},{"location":"composite-actions/template/#inputs","title":"Inputs","text":"<p><code>variable</code> - Full name <code>type</code>. Required/Optional. Allowed values: X</p> <p>Description</p>"},{"location":"composite-actions/template/#outputs","title":"Outputs","text":"<p>N.A.</p>"},{"location":"composite-actions/template/#remarks","title":"Remarks","text":""},{"location":"composite-actions/template/#examples","title":"Examples","text":"<p> <pre><code>example\n</code></pre>"},{"location":"composite-actions/terraform/apply/","title":"apply - Terraform apply task","text":"<p>This template simply takes the artefact produced by the plan template and applies it.</p> <p>Intended to be used in conjunction with sudoblark.github-actions.library/terraform/plan to produce a suitable artefact for application.</p>"},{"location":"composite-actions/terraform/apply/#syntax","title":"Syntax","text":"<pre><code>- uses: sudoblark/sudoblark.github-actions.library/terraform/apply@&lt;version&gt;\n  with:\n    terraform_version: # string\n    working_directory: #string\n    artefact: #string\n    #aws_region: #string\n    #aws_access_key: #string\n    #aws_secret_access_key: #string\n</code></pre>"},{"location":"composite-actions/terraform/apply/#inputs","title":"Inputs","text":"<p><code>terraform_version</code> - Terraform Version</p> <p><code>string</code>. Required. Allowed values: any string value, but should be a semantic version of terraform to actually work.</p> <p>Semantic version of Terraform to utilise for the task.</p> <p><code>working_directory</code> - Working Directory</p> <p><code>string</code>. Required. Allowed values: any string value, but should path to terraform folder to actually work.</p> <p>The working directory to utilise when performing the task.</p> <p><code>working_directory</code> - Working Directory</p> <p><code>string</code>. Required. Allowed values: any string value, but should path to terraform folder to actually work.</p> <p>The working directory to utilise when performing the task.</p> <p><code>artefact</code> - Artefact name</p> <p><code>string</code>. Required. Allowed values: any string value.</p> <p>Full name of the workflow artefact to download which contains produced plan binary files.</p> <p><code>aws_region</code> - AWS Region</p> <p><code>string</code>. Optional. Allowed values: any string value.</p> <p>AWS_DEFAULT_REGION value, required if the hashicorp/aws provider is utilised.</p> <p><code>aws_access_key</code> - AWS Access key</p> <p><code>string</code>. Optional. Allowed values: any string value.</p> <p>AWS_ACCESS_KEY_ID value, required if the hashicorp/aws provider is utilised.</p> <p><code>aws_secret_access_key</code> - AWS Secret Access key</p> <p><code>string</code>. Optional. Allowed values: any string value.</p> <p>AWS_SECRET_ACCESS_KEY value, required if the hashicorp/aws provider is utilised.</p>"},{"location":"composite-actions/terraform/apply/#outputs","title":"Outputs","text":"<p>N.A.</p>"},{"location":"composite-actions/terraform/apply/#remarks","title":"Remarks","text":"<p>N.A.</p>"},{"location":"composite-actions/terraform/apply/#examples","title":"Examples","text":"<p>A full continuous delivery workflow, requiring approval before application of the produced plan artefact.</p> <p>Source code available here.</p> <pre><code>---\nname: sudoblark.terraform.modularised-demo/deployment/sudoblark/deploy\nenv:\n  AWS_ACCESS_KEY_ID: ${{ secrets.SUDOBLARK_AWS_ACCESS_KEY_ID }}\n  AWS_SECRET_ACCESS_KEY: ${{ secrets.SUDOBLARK_AWS_ACCESS_KEY_VALUE }}\n  AWS_DEFAULT_REGION: eu-west-2\n  REPO_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n  ORG_GITHUB_TOKEN: ${{ secrets.SUDOBLARK_GITHUB_TOKEN }}\n\non:\n  workflow_dispatch:\n    inputs:\n      apply:\n        description: \"If we should apply the terraform\"\n        type: boolean\n        default: false\n\npermissions:\n  issues: write\n\njobs:\n  plan:\n    name: Run Terraform plan\n    runs-on: ubuntu-20.04\n    steps:\n      - uses: actions/checkout@v3\n        env:\n          GITHUB_TOKEN: ${{ env.REPO_GITHUB_TOKEN }}\n\n      - name: Auto-discover Terraform version\n        run: |\n          TERRAFORM_VERSION=$(cat infrastructure/sudoblark/.terraform-version)\n          echo \"TERRAFORM_VERSION=$TERRAFORM_VERSION\" &gt;&gt; $GITHUB_ENV\n\n      - uses: sudoblark/sudoblark.github-actions.library/terraform/plan@&lt;version&gt;\n        with:\n          terraform_version: $TERRAFORM_VERSION\n          working_directory: $GITHUB_WORKSPACE/infrastructure/sudoblark\n          artefact_prefix: sudoblark\n          aws_region: eu-west-2\n          aws_access_key: $AWS_ACCESS_KEY_ID\n          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY\n\n  approval:\n    name: Wait for approval\n    runs-on: ubuntu-20.04\n    needs: plan\n    if: ${{ success() &amp;&amp; inputs.apply  }}\n    steps:\n    - uses: trstringer/manual-approval@v1\n      with:\n        secret: ${{ env.REPO_GITHUB_TOKEN }}\n        approvers: benjaminlukeclark\n        minimum-approvals: 1\n        issue-title: \"Deploying sudoblark.terraform.modularised-demo to sudoblark\"\n        issue-body: \"Please approve or deny the deployment.\"\n        exclude-workflow-initiator-as-approver: false\n\n  apply:\n    name: Terraform apply\n    runs-on: ubuntu-20.04\n    needs: approval\n    steps:\n    - uses: actions/checkout@v3\n      env:\n        GITHUB_TOKEN: ${{ env.REPO_GITHUB_TOKEN }}\n\n    - name: Auto-discover Terraform version\n      run: |\n        TERRAFORM_VERSION=$(cat infrastructure/sudoblark/.terraform-version)\n        echo \"TERRAFORM_VERSION=$TERRAFORM_VERSION\" &gt;&gt; $GITHUB_ENV\n      shell: bash\n\n    - name: ZIP lambdas\n      run: |\n        cd application/unzip-lambda/unzip_lambda\n        zip -r lambda.zip lambda_function.py\n        mkdir src\n        mv lambda.zip src\n      shell: bash\n\n    - uses: sudoblark/sudoblark.github-actions.library/terraform/apply@&lt;version&gt;\n      with:\n        terraform_version: $TERRAFORM_VERSION\n        working_directory: $GITHUB_WORKSPACE/infrastructure/sudoblark\n        artefact: sudoblark-terraform-artefact\n        aws_region: eu-west-2\n        aws_access_key: $AWS_ACCESS_KEY_ID\n        aws_secret_access_key: $AWS_SECRET_ACCESS_KEY\n</code></pre> <p>Utilise the fact that <code>env</code> is still valid for composite actions to pass in AWS credentials this way instead:</p> <pre><code>      - uses: sudoblark/sudoblark.github-actions.library/terraform/apply@&lt;version&gt;\n        with:\n          terraform_version: $TERRAFORM_VERSION\n          working_directory: $GITHUB_WORKSPACE/infrastructure/sudoblark\n          artefact_prefix: sudoblark-terraform-artefact\n        env:\n          AWS_DEFAULT_REGION: eu-west-2\n          AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID\n          AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY\n</code></pre> <p>Use <code>env</code> to apply against Azure DevOps:</p> <pre><code>      - uses: sudoblark/sudoblark.github-actions.library/terraform/apply@&lt;version&gt;\n        with:\n          terraform_version: $TERRAFORM_VERSION\n          working_directory: $GITHUB_WORKSPACE/infrastructure/sudoblark\n          artefact_prefix: sudoblark-terraform-artefact\n        env:\n          AZDO_PERSONAL_ACCESS_TOKEN: &lt;TOKEN&gt;\n</code></pre>"},{"location":"composite-actions/terraform/plan/","title":"plan - Terraform plan task","text":"<p>Run quality checks against terraform, in addition to outputting a plan, with results outputted to a pipeline artefact ZIP file with the name {{ outputs.artefact_name }}, contents of which are as follows:</p> <ul> <li>terraform.plan        : Binary terraform plan</li> <li>terraform.validate    : Results of terraform validation</li> <li>terraform.show        : Terraform plan in human-readable format</li> <li>terraform.json        : Terraform plan in JSON format, required for some downstream CLI tooling</li> <li>terraform.format      : List of files which have failed terraform format checks, else an empty file</li> <li>checkov.xml           : JUnit output of Checkov results, can be used to upload test results downstream</li> </ul>"},{"location":"composite-actions/terraform/plan/#syntax","title":"Syntax","text":"<pre><code>- uses: sudoblark/sudoblark.github-actions.library/terraform/plan@&lt;version&gt;\n  with:\n    terraform_version: # string\n    working_directory: #string\n    artefact_prefix: #string\n    #aws_region: #string\n    #aws_access_key: #string\n    #aws_secret_access_key: #string\n</code></pre>"},{"location":"composite-actions/terraform/plan/#inputs","title":"Inputs","text":"<p><code>terraform_version</code> - Terraform Version</p> <p><code>string</code>. Required. Allowed values: any string value, but should be a semantic version of terraform to actually work.</p> <p>Semantic version of Terraform to utilise for the task.</p> <p><code>working_directory</code> - Working Directory</p> <p><code>string</code>. Required. Allowed values: any string value, but should path to terraform folder to actually work.</p> <p>The working directory to utilise when performing the task.</p> <p><code>working_directory</code> - Working Directory</p> <p><code>string</code>. Required. Allowed values: any string value, but should path to terraform folder to actually work.</p> <p>The working directory to utilise when performing the task.</p> <p><code>artefact_prefix</code> - Artefact prefix</p> <p><code>string</code>. Required. Allowed values: any string value.</p> <p>Prefix to append to terraform-artefact produced by the task.</p> <p><code>aws_region</code> - AWS Region</p> <p><code>string</code>. Optional. Allowed values: any string value.</p> <p>AWS_DEFAULT_REGION value, required if the hashicorp/aws provider is utilised.</p> <p><code>aws_access_key</code> - AWS Access key</p> <p><code>string</code>. Optional. Allowed values: any string value.</p> <p>AWS_ACCESS_KEY_ID value, required if the hashicorp/aws provider is utilised.</p> <p><code>aws_secret_access_key</code> - AWS Secret Access key</p> <p><code>string</code>. Optional. Allowed values: any string value.</p> <p>AWS_SECRET_ACCESS_KEY value, required if the hashicorp/aws provider is utilised.</p>"},{"location":"composite-actions/terraform/plan/#outputs","title":"Outputs","text":"<p><code>artefact_name</code> - Artefact name</p> <p><code>string</code>.</p> <p>Name of the artefact which contains results of the plan operation.</p>"},{"location":"composite-actions/terraform/plan/#remarks","title":"Remarks","text":"<p>N.A.</p>"},{"location":"composite-actions/terraform/plan/#examples","title":"Examples","text":"<p>Run a simple plan for AWS, discovering terraform version from a local .terraform-version file.</p> <p>Source code available here.</p> <pre><code>---\n      - name: Auto-discover Terraform version\n        run: |\n          TERRAFORM_VERSION=$(cat infrastructure/sudoblark/.terraform-version)\n          echo \"TERRAFORM_VERSION=$TERRAFORM_VERSION\" &gt;&gt; $GITHUB_ENV\n\n      - uses: sudoblark/sudoblark.github-actions.library/terraform/plan@&lt;version&gt;\n        with:\n          terraform_version: $TERRAFORM_VERSION\n          working_directory: $GITHUB_WORKSPACE/infrastructure/sudoblark\n          artefact_prefix: sudoblark\n          aws_region: eu-west-2\n          aws_access_key: $AWS_ACCESS_KEY_ID\n          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY\n</code></pre> <p>Utilise the fact that <code>env</code> is still valid for composite actions to pass in AWS credentials this way instead:</p> <pre><code>      - uses: sudoblark/sudoblark.github-actions.library/terraform/plan@&lt;version&gt;\n        with:\n          terraform_version: $TERRAFORM_VERSION\n          working_directory: $GITHUB_WORKSPACE/infrastructure/sudoblark\n          artefact_prefix: sudoblark\n        env:\n          AWS_DEFAULT_REGION: eu-west-2\n          AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID\n          AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY\n</code></pre> <p>Use <code>env</code> to plan against Azure DevOps:</p> <pre><code>      - uses: sudoblark/sudoblark.github-actions.library/terraform/plan@&lt;version&gt;\n        with:\n          terraform_version: $TERRAFORM_VERSION\n          working_directory: $GITHUB_WORKSPACE/infrastructure/sudoblark\n          artefact_prefix: sudoblark\n        env:\n          AZDO_PERSONAL_ACCESS_TOKEN: &lt;TOKEN&gt;\n</code></pre> <p>Matrix usage in order to plan against multiple environments, especially useful if you're using a microservice approach and one repository is responsible for one application across all its pertinent environments.</p> <pre><code>on: [pull_request]\n\njobs:\n  terraform_quality_checks:\n    runs-on: ubuntu-latest\n    name: A simple job to validate that pushed terraform is valid for all environment in the repo\n    strategy:\n      matrix:\n        ENVIRONMENTS: [\n          {\n            terraform_version: 1.5.1,\n            folder: dev,\n            prefix: dev,\n            aws_region: eu-west-2\n          },\n          {\n            terraform_version: 1.8.1,\n            folder: test,\n            prefix: test,\n            aws_region: eu-west-1\n          }\n          {\n            terraform_version: 1.10.1,\n            folder: prod,\n            prefix: prod,\n            aws_region: us-east-1\n          }\n\n        ]\n    steps:\n      - uses: actions/checkout@v4\n      - uses: sudoblark/sudoblark.github-actions.library/terraform/plan@1.0.0\n        with:\n          terraform_version: ${{ matrix.ENVIRONMENTS.terraform_version }}\n          working_directory: infrastructure/${{ matrix.ENVIRONMENTS.folder }}\n          artefact_prefix: ${{ matrix.ENVIRONMENTS.prefix }}\n          aws_region: ${{ matrix.ENVIRONMENTS.aws_region }}\n          ## Assumed singular IAM role that can assume roles in other accounts\n          aws_access_key: ${{ secrets.ACCESS_KEY_ID }}\n          aws_secret_access_key: ${{ secrets.ACCESS_KEY_VALUE }}\n</code></pre>"},{"location":"getting-started/how-to-utilise/","title":"How to utilise","text":"<p>Composite actions within the repository are grouped by technology/domain-of-interest.</p> <p>For example, actions under \"Terraform\" are intended to provide re-usable components for interaction with Terraform.</p> <p>It is thus intended that individuals will search for the action(s) of interest and review their in-depth documentation there in order to utilise it within their workflows.</p> <p>Release notes are also provided here in an easily digestible format.</p>"},{"location":"getting-started/what-are-composite-actions/","title":"The official docs","text":"<p>According to GitHub's documentation:</p> <p>Composite actions allow you to collect a series of workflow job steps into a single action which you can then run as a single job step in multiple workflows.</p>"},{"location":"getting-started/what-are-composite-actions/#a-laymans-explanation","title":"A layman's explanation","text":"<p>In object-orientated programming we strive for code re-use, avoidance of duplication, and cohesive modules within our codebase.</p> <p>The same may be said for CI/CD operations. Any CI/CD platform boils down simply to a bunch of arbitrary code that is executed in response to a stimulus. A commit to a pull request, a merge to the main branch, a release, a tag, a requested workflow execution... these are all just stimuli to trigger some form of arbitrary code to fulfill a need.</p> <p>In short, if you imagine CI/CD as an event-based architecture, and the operations that our pipelines/workflows perform as arbitrary code like any other, you're off to a good start.</p>"},{"location":"getting-started/what-are-composite-actions/#application-of-quality-principles","title":"Application of quality principles","text":"<p>The question then becomes how to apply the usual software engineering quality attributes to such a codebase. How do we ensure cohesive modules, promote re-use, avoid duplication? These questions become even more pressing if we attempt to \"shift-left\" and create a platform of self-service that others can just pickup and use.</p> <p>The answer, or at least part of it, is component libraries of re-usable tasks and/or entire workflows.</p> <ul> <li>Azure DevOps Pipelines has resources, which may be utilised to download a component library of tasks to utilise</li> <li>GitLab CI has components, which allows you to define a repository of tasks to reference with <code>include</code> statements</li> <li>GitHub Actions has both the Actions marketplace and GitHub Actions</li> </ul> <p>Having a centralised, standardised, set of re-usable actions controlled within an organisation is the first step in scaling CI/CD without the hassle. This project is thus a show-piece for doing so with GitHub, via the usage of GitHub Actions.</p>"},{"location":"release-notes/1.0.0/","title":"Initial Release","text":""},{"location":"release-notes/1.0.0/#release-notes-sudoblarkgithub-actionslibrary-100","title":"Release notes - sudoblark.github-actions.library 1.0.0","text":"<p>Release doc template by good-docs, see here for their templates.</p> <p>Avaialble on GitHub here</p> <p>19th February 2025</p> <p>Initial release of the GitHub Actions Library, primarily to enable CI/CD workshops next month, utilising GitHub composite actions for standardised terraform plan and apply templates.</p>"},{"location":"release-notes/1.0.0/#new-features","title":"New features","text":"<ul> <li>terraform/plan</li> </ul> <pre><code>Run quality checks against terraform, in addition to outputting a plan, with results outputted\nto a pipeline artefact ZIP file with the name {{ inputs.prefix }}-terraform-artefact, contents\nof which are as follows:\n\n- terraform.plan        : Binary terraform plan\n- terraform.validate    : Results of terraform validation\n- terraform.show        : Terraform plan in human-readable format\n- terraform.json        : Terraform plan in JSON format, required for some downstream CLI tooling\n- terraform.format      : List of files which have failed terraform format checks, else an empty file\n- checkov.xml           : JUnit output of Checkov results, can be used to upload test results downstream\n</code></pre> Interface as follows <pre><code>inputs:\n  terraform_version:\n    description: \"Semantic version of Terraform to utilise for the task.\"\n    type: string\n    required: true\n  working_directory:\n    description: \"The working directory to utilise when performing the task.\"\n    type: string\n    required: true\n  artefact_prefix:\n    description: \"Prefix to append to terraform-artefact produced by the task.\"\n    type: string\n    required: true\n  aws_region:\n    description: \"AWS_DEFAULT_REGION value, required if the hashicorp/aws provider is utilised.\"\n    type: string\n    default: \"\"\n    required: false\n  aws_access_key:\n    description: \"AWS_ACCESS_KEY_ID value, required if the hashicorp/aws provider is utilised.\"\n    type: string\n    default: \"\"\n    required: false\n  aws_secret_access_key:\n    description: \"AWS_SECRET_ACCESS_KEY value, required if the hashicorp/aws provider is utilised.\"\n    type: string\n    default: \"\"\n    required: false\noutputs:\n  artefact_name:\n    description: \"Name of artefact ZIP file with outputted results.\"\n    value: \"{{ inputs.prefix }}-terraform-artefact\"\n</code></pre> Example usage   https://github.com/sudoblark/sudoblark.terraform.modularised-demo/compare/1.0.1...1.1.0#diff-4f9e38227ed64fefb17f4668a7ac4ab55b6149994d5ac2fd96182d5958479b54R35   <pre><code>     - uses: sudoblark/sudoblark.github-actions.library/terraform/plan@1.0.0\n        with:\n          terraform_version: $TERRAFORM_VERSION\n          working_directory: $GITHUB_WORKSPACE/infrastructure/sudoblark\n          artefact_prefix: sudoblark\n          aws_region: eu-west-2\n          aws_access_key: $AWS_ACCESS_KEY_ID\n          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY\n</code></pre> <ul> <li>terraform/apply</li> </ul> <pre><code>This template simply takes the artefact produced by the plan template and applies it.\n\nIntended to be used in conjunction with sudoblark.github-actions.library/terraform/plan.\n</code></pre> Interface as follows <pre><code>inputs:\n  terraform_version:\n    description: \"Semantic version of Terraform to utilise for the task.\"\n    type: string\n    required: true\n  working_directory:\n    description: \"The working directory to utilise when performing the task.\"\n    type: string\n    required: true\n  artefact:\n    description: \"Name of the artefact - produced by terraform/plan - which we wish to apply\"\n    type: string\n    required: true\n  aws_region:\n    description: \"AWS_DEFAULT_REGION value, required if the hashicorp/aws provider is utilised.\"\n    type: string\n    default: \"\"\n    required: false\n  aws_access_key:\n    description: \"AWS_ACCESS_KEY_ID value, required if the hashicorp/aws provider is utilised.\"\n    type: string\n    default: \"\"\n    required: false\n  aws_secret_access_key:\n    description: \"AWS_SECRET_ACCESS_KEY value, required if the hashicorp/aws provider is utilised.\"\n    type: string\n    default: \"\"\n    required: false\n</code></pre> Example usage   https://github.com/sudoblark/sudoblark.terraform.modularised-demo/compare/1.0.1...1.1.0#diff-4f9e38227ed64fefb17f4668a7ac4ab55b6149994d5ac2fd96182d5958479b54R82   <pre><code>    - uses: sudoblark/sudoblark.github-actions.library/terraform/apply@1.0.0\n      with:\n        terraform_version: $TERRAFORM_VERSION\n        working_directory: $GITHUB_WORKSPACE/infrastructure/sudoblark\n        artefact: sudoblark-terraform-artefact\n        aws_region: eu-west-2\n        aws_access_key: $AWS_ACCESS_KEY_ID\n        aws_secret_access_key: $AWS_SECRET_ACCESS_KEY\n</code></pre>"},{"location":"release-notes/1.0.0/#changelog","title":"Changelog","text":"<ul> <li>Add Terraform tasks by @benjaminlukeclark in https://github.com/sudoblark/sudoblark.github-actions.library/pull/3</li> </ul> <p>Full Changelog: https://github.com/sudoblark/sudoblark.github-actions.library/commits/1.0.0</p>"},{"location":"release-notes/1.0.0/#feedback","title":"Feedback","text":"<p>Submit suggestions for improvements to enquires@sudoblark.com and/or raise an issue.</p>"}]}